[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mgit"
version = "0.2.13"
description = "Multi-provider Git management tool"
authors = ["Steve Antonakakis <steve.antonakakis@gmail.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "mgit"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = ">=3.9.2,<3.13"
aiohttp = "^3.9.0"
azure-devops = "^7.1.0b1"
python-dotenv = "^1.0.0"
rich = "^13.0.0"
typer = "^0.9.0"
pyyaml = "^6.0"
"ruamel.yaml" = "^0.18.0"
cryptography = ">=44.0.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.21.0"
black = "^24.3.0"
ruff = "^0.1.0"
mypy = "^1.0.0"
pyinstaller = "^6.0"
poethepoet = "^0.24.0"
bandit = {extras = ["toml"], version = "^1.8.0"}
safety = "^3.0.0"
pip-audit = "^2.9.0"
pytest-benchmark = "^4.0.0"
memory-profiler = "^0.61.0"

[tool.poetry.scripts]
mgit = "mgit.__main__:entrypoint"

[tool.poe.tasks]
[tool.poe.tasks.build-linux]
help = "Build Linux executable mgit"
cmd = "pyinstaller mgit.spec --clean"

[tool.poe.tasks.build-windows]
help = "Build Windows executable mgit.exe"
cmd = "pyinstaller mgit.spec --clean"

[tool.poe.tasks.build-all]
sequence = ["build-linux", "build-windows"]

[tool.poe.tasks.clean]
cmd = "rm -rf build dist *.spec"

[tool.poe.tasks.test]
cmd = "pytest"

[tool.poe.tasks.lint]
cmd = "ruff check ."

[tool.poe.tasks.format]
cmd = "black ."

[tool.poe.tasks.format-check]
cmd = "black --check --diff ."

[tool.poe.tasks.version-sync]
cmd = "python scripts/update_version.py"
help = "Sync version across all project files"

[tool.poe.tasks.bump-patch]
sequence = [
    {cmd = "poetry version patch"},
    {cmd = "python scripts/update_version.py"}
]
help = "Bump patch version and sync across files"

[tool.poe.tasks.bump-minor]
sequence = [
    {cmd = "poetry version minor"},
    {cmd = "python scripts/update_version.py"}
]
help = "Bump minor version and sync across files"

[tool.poe.tasks.bump-major]
sequence = [
    {cmd = "poetry version major"},
    {cmd = "python scripts/update_version.py"}
]
help = "Bump major version and sync across files"

[tool.black]
line-length = 88
target-version = ['py38']

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["E501"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow (for long-running tests)",
    "requires_network: marks tests that require network access",
    "asyncio: marks tests as async tests",
]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=mgit",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=0",
]
