name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft release?'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate release requirements
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract version information
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          if [[ $VERSION =~ -[a-z]+ ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Is prerelease: $IS_PRERELEASE"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-prerelease"
          exit 1
        fi
        
    - name: Check if version exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git tag -l | grep -q "^v$VERSION$"; then
          echo "Version v$VERSION already exists"
          exit 1
        fi

  # Run full test suite for release
  test:
    name: Release Testing
    needs: validate
    uses: ./.github/workflows/ci.yml

  # Build and publish Python package
  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [validate, test]
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        
    - name: Build package
      run: |
        python -m build
        
    - name: Verify package
      run: |
        python -m twine check dist/*
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
        retention-days: 30

  # Build and publish Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate, test]
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=mgit
          org.opencontainers.image.description=Multi-provider Git management tool
          org.opencontainers.image.version=${{ needs.validate.outputs.version }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          MGIT_VERSION=${{ needs.validate.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

  # Generate release notes
  generate-changelog:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Get the previous tag
        PREV_TAG=$(git tag -l --sort=-version:refname | grep -v "^v$VERSION$" | head -1)
        
        if [ -z "$PREV_TAG" ]; then
          echo "No previous tag found, generating full changelog"
          RANGE="HEAD"
        else
          echo "Previous tag: $PREV_TAG"
          RANGE="$PREV_TAG..HEAD"
        fi
        
        # Generate changelog
        CHANGELOG=$(cat << 'EOF'
        ## What's Changed
        
        ### Features
        $(git log $RANGE --pretty=format:"- %s" --grep="feat\|feature" | head -10)
        
        ### Bug Fixes
        $(git log $RANGE --pretty=format:"- %s" --grep="fix\|bug" | head -10)
        
        ### Improvements
        $(git log $RANGE --pretty=format:"- %s" --grep="improve\|enhance\|refactor" | head -10)
        
        ### Documentation
        $(git log $RANGE --pretty=format:"- %s" --grep="doc\|docs" | head -5)
        
        ### Other Changes
        $(git log $RANGE --oneline --pretty=format:"- %s" | grep -v -E "(feat|fix|doc|improve|enhance|refactor)" | head -5)
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...v$VERSION
        EOF
        )
        
        # Clean up empty sections
        CHANGELOG=$(echo "$CHANGELOG" | sed '/^$/d' | sed '/^### [^:]*:$/d')
        
        # Save changelog
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, test, build-python, build-docker, generate-changelog]
    timeout-minutes: 10
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        release_name: Release v${{ needs.validate.outputs.version }}
        body: ${{ needs.generate-changelog.outputs.changelog }}
        draft: ${{ github.event.inputs.draft || false }}
        prerelease: ${{ needs.validate.outputs.is_prerelease }}
        
    - name: Upload Python package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/mgit-${{ needs.validate.outputs.version }}-py3-none-any.whl
        asset_name: mgit-${{ needs.validate.outputs.version }}-py3-none-any.whl
        asset_content_type: application/octet-stream

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: needs.validate.outputs.is_prerelease == 'false'
    timeout-minutes: 10
    environment:
      name: pypi
      url: https://pypi.org/p/mgit
    permissions:
      id-token: write
      
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        print-hash: true

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: always() && needs.create-release.result == 'success'
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update version for next development
      if: needs.validate.outputs.is_prerelease == 'false'
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Increment patch version for next development
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        NEXT_PATCH=$((PATCH + 1))
        NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
        
        # Update pyproject.toml
        sed -i "s/version = \"$VERSION\"/version = \"$NEXT_VERSION-dev\"/" pyproject.toml
        
        # Commit and push
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "chore: bump version to $NEXT_VERSION-dev [skip ci]" || exit 0
        git push
        
    - name: Create announcement
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        echo "🎉 mgit v$VERSION has been released!"
        echo "📦 Package: https://pypi.org/project/mgit/$VERSION/"
        echo "🐳 Docker: ghcr.io/${{ github.repository }}:$VERSION"
        echo "📝 Release Notes: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"

  # Notify on failure
  notify-failure:
    name: Notify Release Failure
    runs-on: ubuntu-latest
    needs: [validate, test, build-python, build-docker, create-release]
    if: failure()
    
    steps:
    - name: Create failure issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = `Release v${{ needs.validate.outputs.version }} failed`;
          const body = `
          The release workflow for version ${{ needs.validate.outputs.version }} has failed.
          
          **Workflow run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Please check the workflow logs and retry the release.
          
          /label bug release
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'release']
          });