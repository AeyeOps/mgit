name: Auto Release on Version Change

on:
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'
  workflow_dispatch:
    inputs:
      force-release:
        description: 'Force a release even if version unchanged'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Check if version changed
      id: check
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep -m1 '^version' pyproject.toml | sed 's/.*"\(.*\)".*/\1/')
        
        # Get previous version
        git checkout HEAD~1
        PREVIOUS_VERSION=$(grep -m1 '^version' pyproject.toml | sed 's/.*"\(.*\)".*/\1/' || echo "")
        git checkout -
        
        echo "Current version: $CURRENT_VERSION"
        echo "Previous version: $PREVIOUS_VERSION"
        
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] || [ "${{ inputs.force-release }}" == "true" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          if [ "${{ inputs.force-release }}" == "true" ]; then
            echo "Force release requested for version $CURRENT_VERSION"
          else
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          fi
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "Version unchanged"
        fi

  quality-checks:
    name: Quality & Security Checks
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Install dependencies
      run: poetry install --with dev
        
    - name: Run Black formatting check
      run: poetry run black --check mgit/
      
    - name: Run Ruff linting
      run: poetry run ruff check mgit/
      
    - name: Run Bandit security scan
      run: poetry run bandit -r mgit/ -lll
      
    - name: Run basic tests
      run: poetry run pytest tests/unit/ -v --tb=short || true
      continue-on-error: true

  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [check-version, quality-checks]
    if: needs.check-version.outputs.version-changed == 'true'
    outputs:
      release-notes: ${{ steps.generate.outputs.notes }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Generate AI Release Notes
      id: generate
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        VERSION: ${{ needs.check-version.outputs.new-version }}
      run: |
        # Install OpenAI if API key is available
        if [ -n "$OPENAI_API_KEY" ]; then
          pip install openai
        fi
        
        # Extract changes from CHANGELOG.md
        echo "Extracting changes from CHANGELOG.md..."
        
        # Create and run extraction script
        python3 << 'PYTHON_SCRIPT'
        import re
        import sys
        import os
        import subprocess
        
        version = os.environ.get('VERSION', '0.0.0')
        
        # Read CHANGELOG.md
        try:
            with open('CHANGELOG.md', 'r') as f:
                content = f.read()
        except FileNotFoundError:
            print('No CHANGELOG.md found')
            sys.exit(0)
        
        # Extract section for this version
        pattern = rf'## \[?{re.escape(version)}\]?.*?\n(.*?)(?=\n## |\Z)'
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            changes = match.group(1).strip()
            with open('version_changes.txt', 'w') as f:
                f.write(changes)
            print(f'Extracted {len(changes)} characters of changes')
        else:
            print(f'No changes found for version {version}')
            # Fall back to recent commits
            commits = subprocess.run(['git', 'log', '--oneline', '-n', '20'], 
                                   capture_output=True, text=True)
            with open('version_changes.txt', 'w') as f:
                f.write('Recent commits:\n' + commits.stdout)
        PYTHON_SCRIPT
        
        # Generate release notes with AI or fallback
        if [ -n "$OPENAI_API_KEY" ]; then
          echo "Generating AI release notes..."
          
          # Run AI generation script
          python3 << 'AI_SCRIPT' >/dev/null 2>&1 || true
        import openai
        import os
        import sys
        
        try:
            client = openai.OpenAI()
            
            # Read changes
            with open('version_changes.txt', 'r') as f:
                changes = f.read()
            
            # Read README for context
            with open('README.md', 'r') as f:
                readme_lines = f.readlines()[:50]
                project_context = ''.join([line for line in readme_lines if line.strip()])
            
            version = os.environ.get('VERSION', '0.0.0')
            prompt = f'''Generate concise GitHub release notes for mgit version {version}.
            
            Project: mgit - A multi-provider Git repository management CLI tool.
            Context: {project_context[:500]}
            
            Changes:
            {changes}
            
            Create professional release notes with:
            1. A brief summary of what this release includes
            2. Key improvements or features (if any)
            3. Bug fixes (if any)
            4. One-line installation command
            
            Keep it concise and focused on what matters to users.
            '''
            
            response = client.chat.completions.create(
                model='gpt-3.5-turbo',
                messages=[
                    {'role': 'system', 'content': 'You are a technical writer creating GitHub release notes.'},
                    {'role': 'user', 'content': prompt}
                ],
                temperature=0.3,
                max_tokens=500
            )
            
            notes = response.choices[0].message.content
            
            # Save to file
            with open('ai_release_notes.txt', 'w') as f:
                f.write(notes)
                
        except Exception as e:
            # Write error marker
            with open('ai_release_notes.txt', 'w') as f:
                f.write('AI_GENERATION_FAILED')
        AI_SCRIPT
        fi
        
        # Create final release notes
        echo "# mgit v${VERSION}" > release_notes.md
        echo "" >> release_notes.md
        
        # Check if AI generation succeeded
        if [ -f ai_release_notes.txt ] && [ "$(cat ai_release_notes.txt)" != "AI_GENERATION_FAILED" ]; then
          cat ai_release_notes.txt >> release_notes.md
        else
          # Fallback release notes
          echo "## Changes in this release:" >> release_notes.md
          echo "" >> release_notes.md
          cat version_changes.txt >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "pip install mgit==${VERSION}" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
        fi
        
        # Output to GitHub using a simpler approach
        echo "notes<<EOF_DELIMITER" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF_DELIMITER" >> $GITHUB_OUTPUT

  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: [check-version, quality-checks, generate-release-notes]
    if: needs.check-version.outputs.version-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Build packages
      run: |
        poetry build
        
    - name: Create and push tag
      env:
        VERSION: ${{ needs.check-version.outputs.new-version }}
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin "v$VERSION"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.new-version }}
        name: Release v${{ needs.check-version.outputs.new-version }}
        body: ${{ needs.generate-release-notes.outputs.release-notes }}
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Docker image
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ needs.check-version.outputs.new-version }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [check-version, quality-checks, build-and-release]
    if: needs.check-version.outputs.version-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Build packages
      run: |
        poetry build
        
    - name: Publish to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        poetry publish --skip-existing