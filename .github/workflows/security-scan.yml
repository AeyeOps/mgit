name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 1 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        type: choice
        options:
          - all
          - sast
          - dependency
          - container
          - secrets
        default: 'all'

jobs:
  # Static Application Security Testing (SAST)
  sast:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'sast' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    timeout-minutes: 15
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit[toml] semgrep
        
    - name: Run Bandit security linter
      run: |
        bandit -r mgit/ -f json -o bandit-results.json
        bandit -r mgit/ -f txt
      continue-on-error: true
      
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: bandit-results.json
        
    - name: Run Semgrep static analysis
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        
    - name: Upload Semgrep results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependency' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    timeout-minutes: 10
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety pip-audit cyclonedx-bom
        
    - name: Run Safety vulnerability check
      run: |
        safety check --json --output safety-results.json
        safety check
      continue-on-error: true
      
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-results.json
        pip-audit --format=cyclonedx --output=sbom.json
        pip-audit
      continue-on-error: true
      
    - name: Generate SBOM
      run: |
        cyclonedx-py requirements -o sbom-cyclonedx.json
        
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-scan-results
        path: |
          safety-results.json
          pip-audit-results.json
          sbom.json
          sbom-cyclonedx.json
          
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'
      with:
        fail-on-severity: moderate

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    timeout-minutes: 20
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: mgit:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'mgit:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        
    - name: Upload Trivy filesystem results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
        
    - name: Run Dockerfile security scan with Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        
    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  # Secret scanning
  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install TruffleHog
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
        
    - name: Run TruffleHog secret scan
      run: |
        trufflehog git file://. --json --no-update > trufflehog-results.json || true
        trufflehog git file://. --no-update
        
    - name: Install and run detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline || true
        
    - name: Upload secret scan results
      uses: actions/upload-artifact@v3
      with:
        name: secret-scan-results
        path: |
          trufflehog-results.json
          .secrets.baseline
          
    - name: Check for high-confidence secrets
      run: |
        # Check if any high-confidence secrets were found
        if [ -f trufflehog-results.json ]; then
          HIGH_CONF=$(jq -r '.[] | select(.Verified == true) | .Raw' trufflehog-results.json | wc -l)
          if [ "$HIGH_CONF" -gt 0 ]; then
            echo "⚠️ Found $HIGH_CONF high-confidence secrets!"
            echo "Please review and remove any exposed secrets before merging."
            exit 1
          fi
        fi

  # License compliance scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pip-licenses licensecheck
        
    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=csv --output-file=licenses.csv
        pip-licenses
        
    - name: Check license compatibility
      run: |
        # Define allowed licenses
        ALLOWED_LICENSES="MIT,Apache-2.0,BSD-3-Clause,BSD-2-Clause,ISC,Python Software Foundation License"
        
        licensecheck --zero --format=json licenses.json > license-check.json || true
        
        echo "License compatibility check completed"
        
    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.csv
          license-check.json

  # OWASP ZAP dynamic security testing
  dast:
    name: Dynamic Security Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Build application for testing
      run: |
        docker build -t mgit:dast .
        
    - name: Run OWASP ZAP baseline scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:8080'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Upload ZAP results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: zap-results
        path: report_html.html

  # Security summary report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, dependency-scan, container-scan, secrets-scan, license-scan, dast]
    if: always()
    
    steps:
    - name: Download all scan results
      uses: actions/download-artifact@v3
      
    - name: Generate security summary report
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check each scan result
        echo "| Scan Type | Status | Critical | High | Medium | Low |" >> security-summary.md
        echo "|-----------|--------|----------|------|--------|-----|" >> security-summary.md
        
        # SAST Results
        if [ -f bandit-results/bandit-results.json ]; then
          CRITICAL=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-results/bandit-results.json)
          echo "| SAST (Bandit) | ✅ | 0 | $CRITICAL | - | - |" >> security-summary.md
        else
          echo "| SAST (Bandit) | ${{ needs.sast.result }} | - | - | - | - |" >> security-summary.md
        fi
        
        # Dependency Scan
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} | - | - | - | - |" >> security-summary.md
        
        # Container Scan
        echo "| Container Scan | ${{ needs.container-scan.result }} | - | - | - | - |" >> security-summary.md
        
        # Secrets Scan
        echo "| Secret Detection | ${{ needs.secrets-scan.result }} | - | - | - | - |" >> security-summary.md
        
        # License Scan
        echo "| License Compliance | ${{ needs.license-scan.result }} | - | - | - | - |" >> security-summary.md
        
        # DAST
        echo "| Dynamic Testing | ${{ needs.dast.result }} | - | - | - | - |" >> security-summary.md
        
        echo "" >> security-summary.md
        echo "## Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        echo "- Review all HIGH and CRITICAL findings" >> security-summary.md
        echo "- Update dependencies with known vulnerabilities" >> security-summary.md
        echo "- Remove any exposed secrets from code" >> security-summary.md
        echo "- Ensure all dependencies use compatible licenses" >> security-summary.md
        
        # Add to GitHub Step Summary
        cat security-summary.md >> $GITHUB_STEP_SUMMARY
        
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Scan Results\n\n${summary}`
          });

  # Security gate check
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [sast, dependency-scan, container-scan, secrets-scan]
    if: always()
    
    steps:
    - name: Evaluate security gate
      run: |
        # Check for any critical failures
        FAILED_SCANS=""
        
        if [ "${{ needs.sast.result }}" = "failure" ]; then
          FAILED_SCANS="$FAILED_SCANS SAST"
        fi
        
        if [ "${{ needs.dependency-scan.result }}" = "failure" ]; then
          FAILED_SCANS="$FAILED_SCANS Dependency"
        fi
        
        if [ "${{ needs.container-scan.result }}" = "failure" ]; then
          FAILED_SCANS="$FAILED_SCANS Container"
        fi
        
        if [ "${{ needs.secrets-scan.result }}" = "failure" ]; then
          FAILED_SCANS="$FAILED_SCANS Secrets"
          echo "❌ Security gate failed: High-confidence secrets detected"
          exit 1
        fi
        
        if [ -n "$FAILED_SCANS" ]; then
          echo "⚠️ Security gate warning: Failed scans:$FAILED_SCANS"
          echo "Please review security findings before proceeding to production"
        else
          echo "✅ Security gate passed: All scans completed successfully"
        fi