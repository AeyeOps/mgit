name: Docker Image Publishing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mgit/**'
      - 'Dockerfile*'
      - 'docker/**'
      - 'pyproject.toml'
      - 'requirements.txt'
      - '.github/workflows/docker-publish.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'mgit/**'
      - 'Dockerfile*'
      - 'docker/**'
  schedule:
    # Rebuild images weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64'
      push_image:
        description: 'Push image to registry'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build matrix for different variants
  prepare:
    name: Prepare Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      
    steps:
    - name: Generate build matrix
      id: matrix
      run: |
        # Define build variants
        MATRIX=$(cat << 'EOF'
        {
          "include": [
            {
              "variant": "standard",
              "dockerfile": "Dockerfile",
              "tags": ["latest", "standard"],
              "platforms": "linux/amd64,linux/arm64"
            },
            {
              "variant": "alpine", 
              "dockerfile": "Dockerfile.alpine",
              "tags": ["alpine"],
              "platforms": "linux/amd64,linux/arm64"
            }
          ]
        }
        EOF
        )
        
        echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Dockerfile security scan
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        
    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and test Docker images
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [prepare, security-scan]
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=false
          suffix=-${{ matrix.variant }},onlatest=true
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}},suffix=
          type=raw,value=${{ join(matrix.tags, ',') }},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=mgit (${{ matrix.variant }})
          org.opencontainers.image.description=Multi-provider Git management tool (${{ matrix.variant }} variant)
          
    - name: Determine platforms
      id: platforms
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
        else
          echo "platforms=${{ github.event.inputs.platforms || matrix.platforms }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      id: build
      with:
        context: .
        file: ./${{ matrix.dockerfile }}
        platforms: ${{ steps.platforms.outputs.platforms }}
        push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_image != 'false') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.variant }}
        cache-to: type=gha,mode=max,scope=${{ matrix.variant }}
        build-args: |
          MGIT_VERSION=${{ github.ref_name }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          
    - name: Test Docker image
      if: contains(steps.platforms.outputs.platforms, 'linux/amd64')
      run: |
        # Extract amd64 image for testing
        docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}-${{ matrix.variant }} || true
        
        # Build local test image for amd64
        docker buildx build \
          --platform linux/amd64 \
          --file ./${{ matrix.dockerfile }} \
          --tag mgit:test-${{ matrix.variant }} \
          --load \
          --build-arg MGIT_VERSION=test \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${{ github.sha }} \
          .
        
        # Test basic functionality
        echo "Testing basic commands..."
        docker run --rm mgit:test-${{ matrix.variant }} --version
        docker run --rm mgit:test-${{ matrix.variant }} --help
        
        # Test health check
        echo "Testing health check..."
        timeout 30s docker run --rm mgit:test-${{ matrix.variant }} /usr/local/bin/healthcheck.sh
        
        # Test entrypoint
        echo "Testing entrypoint..."
        docker run --rm mgit:test-${{ matrix.variant }} config --show || true
        
    - name: Run container security scan
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}-${{ matrix.variant }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        
    - name: Upload container scan results
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Generate security report
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: build
    if: always() && github.event_name != 'pull_request'
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate security summary
      run: |
        echo "# Docker Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Image Variants Built" >> $GITHUB_STEP_SUMMARY
        echo "- Standard (Debian-based)" >> $GITHUB_STEP_SUMMARY
        echo "- Alpine (Alpine Linux-based)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Security Scans Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dockerfile linting (Hadolint)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Filesystem vulnerability scan (Trivy)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Container image vulnerability scan (Trivy)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Registry Information" >> $GITHUB_STEP_SUMMARY
        echo "- Registry: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- Repository: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  # Deployment notifications
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: build
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Create deployment summary
      run: |
        echo "🐳 Docker images published successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Published Images" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --help" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY