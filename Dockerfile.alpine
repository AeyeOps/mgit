# Multi-stage Alpine-based Dockerfile for minimal mgit container
# Optimized for size and security

# Build stage - Install dependencies and build the application
FROM python:3.11-alpine as builder

# Set build arguments
ARG MGIT_VERSION=0.2.1
ARG BUILD_DATE
ARG VCS_REF

# Add metadata labels
LABEL org.opencontainers.image.title="mgit" \
      org.opencontainers.image.description="Multi-provider Git management tool (Alpine)" \
      org.opencontainers.image.version="${MGIT_VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.authors="Steve Antonakakis <steve.antonakakis@gmail.com>"

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    git \
    ca-certificates \
    libffi-dev \
    openssl-dev

# Create build user
RUN addgroup -g 1001 mgit && \
    adduser -D -u 1001 -G mgit mgit

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel build

# Copy source code
COPY --chown=mgit:mgit . .

# Build the application
RUN python -m build --wheel && \
    pip install --no-cache-dir dist/*.whl

# Verify installation
RUN python -m mgit --version

# Runtime stage - Minimal Alpine image
FROM python:3.11-alpine as runtime

# Set runtime arguments
ARG MGIT_VERSION=0.2.1
ARG BUILD_DATE
ARG VCS_REF

# Add runtime labels
LABEL org.opencontainers.image.title="mgit" \
      org.opencontainers.image.description="Multi-provider Git management tool (Alpine)" \
      org.opencontainers.image.version="${MGIT_VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.licenses="MIT"

# Install minimal runtime dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    curl \
    bash && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 mgit && \
    adduser -D -u 1001 -G mgit -h /home/mgit -s /bin/bash mgit && \
    mkdir -p /home/mgit/.mgit /app/data && \
    chown -R mgit:mgit /home/mgit /app

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=mgit:mgit /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder --chown=mgit:mgit /usr/local/bin/mgit /usr/local/bin/mgit

# Copy scripts
COPY --chown=mgit:mgit docker/entrypoint.sh /usr/local/bin/entrypoint.sh
COPY --chown=mgit:mgit docker/healthcheck.sh /usr/local/bin/healthcheck.sh

# Make scripts executable
RUN chmod +x /usr/local/bin/entrypoint.sh /usr/local/bin/healthcheck.sh

# Set environment variables
ENV MGIT_CONFIG_DIR=/home/mgit/.mgit \
    MGIT_DATA_DIR=/app/data \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Create directories
RUN mkdir -p ${MGIT_CONFIG_DIR} ${MGIT_DATA_DIR} && \
    chown -R mgit:mgit ${MGIT_CONFIG_DIR} ${MGIT_DATA_DIR}

# Set volumes
VOLUME ["${MGIT_CONFIG_DIR}", "${MGIT_DATA_DIR}"]

# Switch to non-root user
USER mgit

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Set entrypoint and default command
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["--help"]