#!/bin/bash
set -euo pipefail

# mgit Docker Entrypoint Script
# Handles initialization, configuration validation, and graceful execution

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*" >&2
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $*" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*" >&2
}

# Signal handling for graceful shutdown
cleanup() {
    log_info "Received shutdown signal, cleaning up..."
    # Kill any child processes
    jobs -p | xargs -r kill 2>/dev/null || true
    exit 0
}

# Set up signal traps
trap cleanup SIGTERM SIGINT SIGQUIT

# Validate environment
validate_environment() {
    log_info "Validating environment..."
    
    # Check if mgit is installed and accessible
    if ! command -v mgit >/dev/null 2>&1; then
        log_error "mgit command not found in PATH"
        exit 1
    fi
    
    # Test mgit installation
    if ! mgit --version >/dev/null 2>&1; then
        log_error "mgit installation appears to be broken"
        exit 1
    fi
    
    # Check configuration directory
    if [[ ! -d "${MGIT_CONFIG_DIR}" ]]; then
        log_warn "Configuration directory ${MGIT_CONFIG_DIR} does not exist, creating..."
        mkdir -p "${MGIT_CONFIG_DIR}"
    fi
    
    # Check data directory
    if [[ ! -d "${MGIT_DATA_DIR}" ]]; then
        log_warn "Data directory ${MGIT_DATA_DIR} does not exist, creating..."
        mkdir -p "${MGIT_DATA_DIR}"
    fi
    
    # Verify write permissions
    if [[ ! -w "${MGIT_CONFIG_DIR}" ]]; then
        log_error "No write permission to configuration directory: ${MGIT_CONFIG_DIR}"
        exit 1
    fi
    
    if [[ ! -w "${MGIT_DATA_DIR}" ]]; then
        log_error "No write permission to data directory: ${MGIT_DATA_DIR}"
        exit 1
    fi
    
    log_success "Environment validation passed"
}

# Initialize configuration if needed
initialize_config() {
    local config_file="${MGIT_CONFIG_DIR}/config.yaml"
    
    if [[ ! -f "${config_file}" ]]; then
        log_info "No configuration file found, creating default..."
        
        # Create minimal default configuration
        cat > "${config_file}" << 'EOF'
# mgit configuration file
# Generated by Docker container initialization

# Default settings
default_concurrency: 5
default_update_mode: "pull"

# Logging configuration
logging:
  level: "INFO"
  file_enabled: false

# Provider configurations will be added when running commands
providers: {}
EOF
        log_success "Default configuration created at ${config_file}"
    else
        log_info "Configuration file already exists: ${config_file}"
    fi
}

# Display container information
show_container_info() {
    log_info "=== mgit Docker Container ==="
    echo "Version: $(mgit --version 2>/dev/null || echo 'Unknown')"
    echo "User: $(whoami)"
    echo "Working Directory: $(pwd)"
    echo "Config Directory: ${MGIT_CONFIG_DIR}"
    echo "Data Directory: ${MGIT_DATA_DIR}"
    echo "Python Version: $(python --version 2>&1)"
    echo "Git Version: $(git --version 2>&1 || echo 'Git not available')"
    echo "=============================="
}

# Main execution function
main() {
    log_info "Starting mgit container..."
    
    # Show container information
    show_container_info
    
    # Validate environment
    validate_environment
    
    # Initialize configuration if needed
    initialize_config
    
    # If no arguments provided, show help
    if [[ $# -eq 0 ]]; then
        log_info "No arguments provided, showing help..."
        exec mgit --help
    fi
    
    # Handle special cases
    case "${1:-}" in
        "bash"|"sh"|"/bin/bash"|"/bin/sh")
            log_info "Starting interactive shell..."
            exec "${1}"
            ;;
        "help"|"--help"|"-h")
            exec mgit --help
            ;;
        "version"|"--version"|"-v")
            exec mgit --version
            ;;
        *)
            # Execute mgit with provided arguments
            log_info "Executing: mgit $*"
            exec mgit "$@"
            ;;
    esac
}

# Execute main function with all arguments
main "$@"